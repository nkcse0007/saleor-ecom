from typing import List

import checkout_sdk as sdk

from ... import TransactionKind
from ...interface import (
    CustomerSource,
    GatewayConfig,
    GatewayResponse,
    PaymentData,
    PaymentMethodInfo,
)
from .utils import (
    get_amount_for_checkout,
    get_amount_from_checkout,
    get_currency_for_checkout,
    get_currency_from_checkout,
    shipping_to_checkout_dict,
)


def get_client_token(**_):
    """Not implemented for checkout gateway currently.

    The client token can be generated by checkout.js automatically.
    """
    return


def authorize(
        payment_information: PaymentData, config: GatewayConfig
) -> GatewayResponse:
    kind = TransactionKind.CAPTURE if config.auto_capture else TransactionKind.AUTH
    client = _get_client(**config.connection_params)
    capture_method = True
    currency = get_currency_for_checkout(payment_information.currency)
    checkout_amount = get_amount_for_checkout(payment_information.amount, currency)
    shipping = (
        shipping_to_checkout_dict(payment_information.shipping)
        if payment_information.shipping
        else None
    )

    try:
        payment_res = client.payments.request(
            source={
                "token": payment_information.token
            },
            amount=checkout_amount,
            currency=currency,
            confirm=True,
            shipping=shipping,
            capture=capture_method,
        )
    except sdk.errors.CheckoutSdkError as exc:
        response = _error_response(kind=kind, exc=exc, payment_info=payment_information)
    else:
        success = payment_res.status in (
            "Authorized", "Pending", "Card Verified", "Captured", "Declined", "Paid")
        response = _success_response(
            intent=payment_res, kind=kind, success=success,
            amount=payment_information.amount,
            currency=currency,
            customer_id=payment_res.customer.id,
            raw_response={
                "payment_id": payment_res.id,
                "amount": payment_res.amount,
                "approved": payment_res.approved,
                "status": payment_res.status,
                "source": {
                    "type": payment_res.source.type,
                    "id": payment_res.source.id,
                },
                "customer": {
                    "id": payment_res.customer.id,
                }
            }
        )
        response = fill_card_details(payment_res, response)
    return response


def capture(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:
    client = _get_client(**config.connection_params)
    intent = None
    try:
        intent = client.payments.capture(payment_information.token,
                                         amount=payment_information.amount,
                                         reference='CAPTURE')
    except sdk.errors.CheckoutSdkError as exc:
        action_required = intent.error_type == "request_invalid" if intent else False
        response = _error_response(
            kind=TransactionKind.CAPTURE,
            exc=exc,
            payment_info=payment_information,
            action_required=action_required,
        )
    else:
        response = _success_response(
            intent=intent,
            kind=TransactionKind.CAPTURE,
            success=True,
        )
    return response


def refund(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:
    client = _get_client(**config.connection_params)
    currency = get_currency_for_checkout(payment_information.currency)
    checkout_amount = get_amount_for_checkout(payment_information.amount, currency)
    try:
        intent = client.payments.refund(str(payment_information.token),
                                        amount=checkout_amount,
                                        reference='REFUND')
    except sdk.errors.CheckoutSdkError as exc:
        response = _error_response(
            kind=TransactionKind.REFUND, exc=exc, payment_info=payment_information
        )
    else:
        response = _success_response(
            intent=intent,
            kind=TransactionKind.REFUND,
            success=True,
            amount=payment_information.amount,
            currency=get_currency_from_checkout(currency),
        )

    return response


def list_client_sources(
        config: GatewayConfig, customer_id: str
) -> List[CustomerSource]:
    client = _get_client(**config.connection_params)
    cards = client.PaymentMethod.list(customer=customer_id, type="card")["data"]
    return [
        CustomerSource(
            id=c.id,
            gateway="checkout",
            credit_card_info=PaymentMethodInfo(
                exp_year=c.card.exp_year,
                exp_month=c.card.exp_month,
                last_4=c.card.last4,
                name=None,
            ),
        )
        for c in cards
    ]


def void(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:
    client = _get_client(**config.connection_params)
    try:
        intent = client.payments.void(str(payment_information.token), reference='VOID')
    except sdk.errors.CheckoutSdkError as exc:
        response = _error_response(
            kind=TransactionKind.VOID, exc=exc, payment_info=payment_information
        )
    else:
        response = _success_response(
            intent=intent,
            kind=TransactionKind.VOID,
            currency=get_currency_from_checkout(PaymentData.currency),
        )
    return response


def process_payment(
        payment_information: PaymentData, config: GatewayConfig
) -> GatewayResponse:
    return authorize(payment_information, config)


def _get_client(**connection_params):
    api = sdk.get_api(secret_key=connection_params.get("private_key"))
    return api


def _error_response(
        kind: str,  # use TransactionKind class
        exc: sdk.errors.CheckoutSdkError,
        payment_info: PaymentData,
        action_required: bool = False,
) -> GatewayResponse:
    return GatewayResponse(
        is_success=False,
        action_required=action_required,
        transaction_id=payment_info.token,
        amount=payment_info.amount,
        currency=payment_info.currency,
        error=exc.__str__(),
        kind=kind,
        raw_response={
            "http_status": exc.http_status,
            "error_type": exc.error_type,
            "elapsed": exc.elapsed,
            "request_id": exc.request_id,
            "error_codes": exc.error_codes
        } if exc else None,
        customer_id=payment_info.customer_id,
    )


def _success_response(
        intent: "",
        kind: str,  # use TransactionKind class
        success: bool = True,
        amount=None,
        currency=None,
        customer_id=None,
        raw_response=None,
):
    currency = currency or get_currency_from_checkout(intent.currency)

    try:
        action_required = intent.status == "requires_action"
    except Exception as e:
        print(e.__str__())
        action_required = True

    try:
        transaction_id = intent.id
    except Exception as e:
        print(e.__str__())
        transaction_id = intent.action_id

    return GatewayResponse(
        is_success=success,
        action_required=action_required,
        transaction_id=transaction_id,
        amount=amount,
        currency=currency,
        error=None,
        kind=kind,
        customer_id=customer_id,
        raw_response=raw_response,
    )


def fill_card_details(intent: "", response: GatewayResponse):
    charges = intent["source"]
    if charges:
        type = intent["source"]["type"]

        response.payment_method_info = PaymentMethodInfo(
            last_4=charges["last4"],
            type=type,
        )
    return response
